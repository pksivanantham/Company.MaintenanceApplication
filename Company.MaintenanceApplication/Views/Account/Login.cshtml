@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@model LoginViewModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Log in";
}
<style>
    html,
    body {
        height: 100%;
        /*background-color: #333;*/
        background-image: url("/images/loginbg.jpg") !important
    }
    body {
        color: #fff;
     
        text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);
    }
    hr {
        display: block;
        height: 1px;
        border: 0;
        border-top: 1px solid #ccc;
        margin: 1em 0;
        padding: 0;
    }
</style>
<h2>@ViewData["Title"].</h2>

    <div class="row " >
        <div class="col-md-12 col-sm-12">
            <section>
                <form asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">                    
                    <hr />
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="Email" class="col-md-2 control-label"></label>
                        <div class="col-md-10">
                            <input asp-for="Email" class="form-control" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label asp-for="Password" class="col-md-2 control-label"></label>
                        <div class="col-md-10">
                            <input asp-for="Password" class="form-control" />
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <div class="checkbox">
                                <label asp-for="RememberMe">
                                    <input asp-for="RememberMe" />
                                    @Html.DisplayNameFor(m => m.RememberMe)
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <button type="submit" class="btn btn-outline-primary">Log in</button>
                        </div>
                    </div>
                    <p>
                        <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]">Register as a new user?</a>
                    </p>
                    <p>
                        <a asp-action="ForgotPassword">Forgot your password?</a>
                    </p>
                </form>
            </section>
        </div>
        @*<div class="col-md-4">
                <section>
                    <h4>Use another service to log in.</h4>
                    <hr />
                    @{
                        var loginProviders = SignInManager.GetExternalAuthenticationSchemes().ToList();
                        if (loginProviders.Count == 0)
                        {
                            <div>
                                <p>
                                    There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                                    for details on setting up this ASP.NET application to support logging in via external services.
                                </p>
                            </div>
                        }
                        else
                        {
                            <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                                <div>
                                    <p>
                                        @foreach (var provider in loginProviders)
                                        {
                                            <button type="submit" class="btn btn-default" name="provider" value="@provider.AuthenticationScheme" title="Log in using your @provider.DisplayName account">@provider.AuthenticationScheme</button>
                                        }
                                    </p>
                                </div>
                            </form>
                        }
                    }
                </section>
            </div>*@
      
        <div class="col-md-7 col-sm-12">
            
            <div id="loginAnimationDiv" class="col-md-6 col-sm-12">
            </div>
        </div>
    </div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>

        var chars = '0123456789ABCDEF'.split('');

        var randomColor = function () {
            var color = '#';
            for (var i = 0; i < 6; i++)
                color += chars[Math.floor(Math.random() * 16)];
            return color;
        };
        function fnLoadAnimation(id)
        {
            var width = 700,
                height = 500;

            var nodes = [];

            var svg = d3.select("#" + id).append("svg")
                .attr("width", width)
                .attr("height", height);

            var force = d3.layout.force()
                .charge(-20)
                .size([width, height])
                .nodes(nodes)
                .on("tick", tick)
                .start();

            function tick() {
                svg.selectAll("circle")
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; })
                    //.attr("fill", function () {return  randomColor() });
            }

            var interval = setInterval(function () {

                var d = {
                    x: width / 2 + 2 * Math.random() - 1,
                    y: height / 2 + 2 * Math.random() - 1
                };

                svg.append("circle")
                    .data([d])
                    .attr("r", 1e-6)
                    .attr("fill", function () { return randomColor() })
                    .transition()
                    .ease(Math.sqrt)
                    .attr("r", 4.5);

                if (nodes.push(d) > 300) {
                    clearInterval(interval);
                    $("#" + id).empty();
                      fnLoadAnimation(id);


                }
                force.start();
            }, 30);
            //callSetInterval();


            //function callSetInterval() {
            //    var interval = setInterval(function () {

            //        var d = {
            //            x: width / 2 + 2 * Math.random() - 1,
            //            y: height / 2 + 2 * Math.random() - 1
            //        };

            //        svg.append("circle")
            //            .data([d])
            //            .attr("r", 1e-6)
            //            .transition()
            //            .ease(Math.sqrt)
            //            .attr("r", 4.5);

            //        if (nodes.push(d) > 300) {
            //            clearInterval(interval);
            //            nodes = [];
            //            $("#loginAnimationDiv").empty();
            //            fnLoadAnimation();
            //        }
            //        force.start();
            //    }, 30);

            //    return interval;
            //}

        }

       // fnLoadAnimation("loginAnimationDiv");
       
    </script>

    }